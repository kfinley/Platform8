{
  "name": "YAP 8",
  "dockerComposeFile": [
    "../dev-compose.yml",
    // must be in root for workspace to match file system
    "docker-compose.yml"
  ],

  // The 'service' property is the name of the service for the container that VS Code should
  // use. Update this value and .devcontainer/docker-compose.yml to the real service name.
  "service": "platform.dev",

  // The optional 'workspaceFolder' property is the path VS Code should open by default when
  // connected. This is typically a file mount in .devcontainer/docker-compose.yml
  "workspaceFolder": "/workspace",

  // Add the IDs of extensions you want installed when the container is created.
  "extensions": [
    "ms-dotnettools.csharp",
    "dbaeumer.vscode-eslint",
    "eamodio.gitlens",
    "bierner.markdown-preview-github-styles",
    "esbenp.prettier-vscode",
    "hbenl.vscode-test-explorer",
    "editorconfig.editorconfig",
    "jcbuisson.vue",
    "firsttris.vscode-jest-runner",
    "octref.vetur",
    "hmnd.css-signature-help",
    "tht13.html-preview-vscode",
    "formulahendry.dotnet-test-explorer",
    "threadheap.serverless-ide-vscode",
    "ms-azuretools.vscode-docker",
    "joshbolduc.story-explorer"
  ],

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],

  // [Optional] To reuse of your local HTTPS dev cert:
  //
  // 1. Export it locally using this command:
  //    * Windows PowerShell:
  //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "$env:USERPROFILE/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
  //    * macOS/Linux terminal:
  //        dotnet dev-certs https --trust; dotnet dev-certs https -ep "${HOME}/.aspnet/https/aspnetapp.pfx" -p "SecurePwdGoesHere"
  //
  // 2. Uncomment these 'remoteEnv' lines:
  //    "remoteEnv": {
  // 	      "ASPNETCORE_Kestrel__Certificates__Default__Password": "SecurePwdGoesHere",
  //        "ASPNETCORE_Kestrel__Certificates__Default__Path": "/home/vscode/.aspnet/https/aspnetapp.pfx",
  //    },
  //
  // 3. Do one of the following depending on your scenario:
  //    * When using GitHub Codespaces and/or Remote - Containers:
  //      1. Start the container
  //      2. Drag ~/.aspnet/https/aspnetapp.pfx into the root of the file explorer
  //      3. Open a terminal in VS Code and run "mkdir -p /home/vscode/.aspnet/https && mv aspnetapp.pfx /home/vscode/.aspnet/https"
  //
  //    * If only using Remote - Containers with a local container, uncomment this line instead:
  //      "mounts": [ "source=${env:HOME}${env:USERPROFILE}/.aspnet/https,target=/home/vscode/.aspnet/https,type=bind" ],

  // "remoteEnv": { "LOCAL_WORKSPACE_FOLDER": "${localWorkspaceFolder}" },

  // "mounts": [ "source=/var/run/docker.sock,target=/var/run/docker-host.sock,type=bind" ],

  "initializeCommand": "./.devcontainer/scripts/init-workspace.sh",

  "postStartCommand": "npm run dev:init",

  // Comment out connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "vscode"
}
